// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package snode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SNodeClient is the client API for SNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SNodeClient interface {
	Execute(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Result, error)
}

type sNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewSNodeClient(cc grpc.ClientConnInterface) SNodeClient {
	return &sNodeClient{cc}
}

func (c *sNodeClient) Execute(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/snode.SNode/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SNodeServer is the server API for SNode service.
// All implementations must embed UnimplementedSNodeServer
// for forward compatibility
type SNodeServer interface {
	Execute(context.Context, *Command) (*Result, error)
	mustEmbedUnimplementedSNodeServer()
}

// UnimplementedSNodeServer must be embedded to have forward compatible implementations.
type UnimplementedSNodeServer struct {
}

func (UnimplementedSNodeServer) Execute(context.Context, *Command) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedSNodeServer) mustEmbedUnimplementedSNodeServer() {}

// UnsafeSNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SNodeServer will
// result in compilation errors.
type UnsafeSNodeServer interface {
	mustEmbedUnimplementedSNodeServer()
}

func RegisterSNodeServer(s grpc.ServiceRegistrar, srv SNodeServer) {
	s.RegisterService(&_SNode_serviceDesc, srv)
}

func _SNode_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNodeServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snode.SNode/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNodeServer).Execute(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _SNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snode.SNode",
	HandlerType: (*SNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _SNode_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snode.proto",
}
